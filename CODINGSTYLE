This document tries to give an overview of the codingstyle used in PGN library.
To keep the code consistent every commit should apply to this codingstyle.

The coding style of PGN library is in no way perfect and is in parts not even
the preferred coding style of the maintainers. But consistency is more important
than personal preferences and most parts of the style can be applied through
simple editor settings.

0. Overall Rule
===============

    Documentation is an important part of the library. Every class and method
    should include appropriate documentation in Doxygen format so that
    automatic API documentation can be generated and the code can be
    easily understand by everyone.

    The comments are most important in the header files, though additional
    information may also be included in the source itself if necessary.  

1. Code formatting
==================

1.1 Indentation

     The code is indented by 4 spaces. No tabs and no discussion ;)

1.2 Brackets

    Brackets always start in a new line of their own.

    Example:

    if (true) 
    {
        // do something
    }

1.3 Inline functions

    Inline functions are declared in the class definition in the header file.
    They are implemented in the header file after the class definition.  
    The author may choose to either implement them directly at the same location
    as the declaration or may place them at the end of the header file (preferred).

2. Naming
=========

2.1 Variables


2.2 Member variables

    Member variables in classes are additionally prefixed with "m_".

    Examples:

    class MyClass
    {
    private:
        bool m_myVariable;
    };

2.3 Methods

    All methods start with an lowcase letter and every new word is
    capitalized again.

    MyClass::functionWithLongName(long parameter);

    Properties are set using a function with the prefix "set", and retrieved with
    a "get".   Also, unless there is a good reason not to - all "Getters" should be
    marked as const.

    MyClass::setProperty(long value);
    long MyClass::getProperty() const;

    Additionally, please use the prefixes "has" and "is" when appropriate.
    E.g.

    MyClass::hasKey();
    MyClass::isLinearized();

2.4 NULL-Pointers

    NULL Pointers are initialized in the code with the constant NULL. Please
    do not use 0 or 0L but use NULL.

3. General Guidelines
===================

3.1 Casting

    C++ style casting is strongly preferred, and the use of C-style casts will
    generate warnings on gcc builds. Use, as appropriate,
        static_cast<>
        const_cast<>
        reinterpret_cast<>
    Dynamic casting and typeid are not presently used in PGN library.

    const_cast<> should be avoided unless it is absolutely required, especially
    for `const char *' variables that might ever take a string literal value.

3.2 Local variable declaration

    Local variables should always be declared closest to their point of use,
    and should be declared `const' wherever possible.

    For example:

    Thing f()
    {
        Thing ret;
        // blah blah blah
        ret = doSomething();
        // blah blah blah
        return ret;
    }

    would be better written as:

    Thing f()
    {
        // blah blah blah
        Thing ret ( doSomething() );
        // blah blah blah
        return ret;
    }

    Remember your const pointers:

    char * x;               Pointer to char
    const char * x;         Pointer to const char
    char * const x;         Const pointer to char
    const char * const x;   Const pointer to const char

3.3 Static arrays

    Static data should be declared as an array of const char rather than a
    pointer to const char whereever possible. This will help the compiler put
    it in the static read only data section of the compiled object, resulting
    in a smaller memory footprint, faster load times, and hardware protection
    against accidental writes to the data.

    const char myStaticData[] = "This is the right way".
    const char * myStaticData = "Avoid this way".

3.4 Use of temporary objects

3.5 The `throw' qualifier

    see:
    http://msdn2.microsoft.com/en-us/library/49147z04.aspx
    http://gcc.gnu.org/onlinedocs/gcc-3.3.1/gcc/Function-Attributes.html

3.6 Exported API

    PGN library draws a distinction between exported and private API on some
    platforms. To do this it uses some macros defined in
    export_decl.hpp to tell the compiler what's public API that should appear
    in the DLL/shared library's symbol table. The rest is not exported.

    This may have several positive effects depending on the particular
    platform and compiler. It can result in a smaller binary, better link
    times, help the compiler optimise better, and ensure that API intended to
    be private to PGN library _cannot_ be called from outside it.

    If you add new classes to PGN library, annotate them with PGN_LIBRARY_API
    as shown in export_decl.hpp if they're intended as public API. If an outside
    user will ever need to reference those symbols directly (by constructing
    the class, calling its methods, etc) they're public.

    Note that classes that only inherit and implement an abstract interface
    that're only constructed through a factory or through other PGN LIBRARY
    classes need not be exported.

3.7 Memory allocations in inlined methods

    It's not safe to (directly) allocate or free
    heap memory in an inlined function, because it only works if the same
    runtime library is used in the shared library and the executable linking
    to the library. Using malloc and/or new in inlined methods will lead to
    crashes on MS Windows systems. It might be undetected on Linux systems
    (even though it is bad style on Linux, too), because most processes and
    libraries use the same runtime library on a Linux system.

    There's also no point inlining functions that call new / delete /
    malloc / free, because the memory allocation is dramatically more
    expensive than a mere function call is.

    Using STL classes that may perform allocations internally is fine since
    they tend to carry their own std::allocator instance (or reference,
    anyway) around with them.

3.8 Visibility of 3rd party headers

    If at all possible, it's desirable not to expose the use of 3rd party
    headers in the PGN library headers. Rather than including headers for
    required libraries, try to forward-declare required types and then include
    the header in the implementation (.cpp) files. 

    Avoiding exposing used 3rd party headers means that users' build systems
    don't need to know how to find those headers, and means that users' programs
    don't get their namespaces polluted by unrelated symbols.

    This applies to some system headers too. <windows.h> for example is a
    difficult and quirky header. Its behaviour is strongly affected by
    a variety of preprocessor definitions and it scatters macros everywhere.
    We shouldn't be exposing it to library users, because it's quite likely
    they'll need to include it with different macro parameters, and theirs
    may conflict with ours or vice versa.

    If you need to include a 3rd party header to make something a direct
    member, consider making it a member by pointer instead, initializing
    it in the object's ctor and destroying it it the dtor.

4. Structure
============

4.1 Project structure

